package com.ob11to.jdbc.starter.test;

import com.ob11to.jdbc.starter.util.ConnectionManager;
import org.postgresql.Driver;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class Test {
    public static void main(String[] args) throws SQLException {
        Class<Driver> driverClass = Driver.class;

//        Пример INSERT
        String sql = """
                INSERT INTO info(data)
                VALUES
                ('autoGenerated');
                """;

//        String sql = """
//                UPDATE info
//                SET data = 'newTest'
//                WHERE id > 1;
//                """;
//
//        String sql = """
//                SELECT *
//                FROM task26.ticket;
//                """;

        try (var connection = ConnectionManager.open();
             var statement = connection.createStatement()) {

            System.out.println(connection.getTransactionIsolation()); // по умолчанию TRANSACTION_READ_COMMITTED
            System.out.println(connection.getSchema() + "\n"); //получаем схему, где находимся

//            var executeStatement = statement.execute(sql); // отправляем запрос в бд
//            var executeStatement = statement.executeUpdate(sql); // отправляет запрос в бд, возвращает int, кол-во изменений

            // System.out.println(statement.getUpdateCount()); // вернет количество обновлений в бд

            //executeQuery() тип ResultSet, его тоже нужно закрывать, но он закроется автоматически, после закрытия statement
//             var executeResult = statement.executeQuery(sql);
//
//             while (executeResult.next()){
//                 System.out.println(executeResult.getLong("id"));
//                 System.out.println(executeResult.getString("passenger_no"));
//                 System.out.println(executeResult.getString("passenger_name"));
//                 System.out.println(executeResult.getBigDecimal("cost"));
//                 System.out.println("------------------");
//
//             }

            var executeUpdate = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS); //второй параметр, чтобы отслеживать
            var generatedKeys = statement.getGeneratedKeys(); //Извлекает любые автоматически сгенерированные ключи, созданные в результате выполнения этого Statement оператора. Если этот объект Statement не сгенерировал никаких ключей, возвращается пустой объект ResultSet .
            while (generatedKeys.next()){
                System.out.println(generatedKeys.getInt("id"));
            }



        }
    }
}


class BatchTransactionRunner {
    public static void main(String[] args) throws SQLException {
        long flightId = 9;
        var deleteFlightSql = "DELETE FROM task26.flight WHERE id = " + flightId;
        var deleteTicketsSql = "DELETE FROM task26.ticket WHERE flight_id = " + flightId ;

        Connection connection = null;
        Statement statement = null;

        try {
            connection = ConnectionManager.open();
            connection.setAutoCommit(false); //убрали auto commit mode

            statement = connection.createStatement();
            statement.addBatch(deleteFlightSql);
            statement.addBatch(deleteTicketsSql);

            var ints = statement.executeBatch();

            connection.commit(); //commit транзакции

        } catch (Exception e) {
            if (connection != null) {
                connection.rollback();
            }
            throw e; // пробрасываем исключение дальше
        } finally {
            if (connection != null) {
                connection.close();
            }
            if (statement != null) {
                statement.close();
            }
        }
    }
}
